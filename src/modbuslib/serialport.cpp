#include <QtCore>

#include "mbcommon.h"
#include "console.h"

#include "serialport.h"
#include "serialport_p.h"

//###################################################################
//
//###################################################################
SerialPort::SerialPort()
  : d( new SerialPortPrivate(this) )
{
  mode                   = ModbusRTU;
  //mode                   = XBee;
  answer_timeout         = 100;
  current_answer_timeout = -1;
}

//===================================================================
//
//===================================================================
SerialPort::~SerialPort()
{
  delete d;
}

//===================================================================
//!
//
//!
//===================================================================
void SerialPort::setMode( PortMode mode )
{
  this->mode = mode;
}

//===================================================================
//!  Задать имя порта
//
//! \param portname имя порта
//===================================================================
void SerialPort::setName( const QString &portname )
{
  d->close();
  this->portname=portname;
}
//===================================================================
//!  Задать скорость передачи данных
//
//! \param speed скорость
//===================================================================
void SerialPort::setSpeed( const int speed )
{
  d->close();
  this->portspeed=speed;
}

//===================================================================
//!  Открыть порт
//===================================================================
bool SerialPort::open()
{
  return d->open();
}

//===================================================================
//!  Закрыть порт
//===================================================================
void SerialPort::close()
{
  d->close();
}

//==============================================================================
//!  Поиск присутствующих в системе последовательных портов
//
//! \return Список присутствующих в системе последовательных портов
//! в формате: [имя];[описание]
//==============================================================================
QStringList SerialPort::queryComPorts()
{
  return SerialPortPrivate::queryComPorts();
}


//===================================================================
//!  Транзакия запрос-ответ
//
//! \par ПРИМЕЧАНИЕ 1.
//! Длина байтового массива \a answer должна совпадать с
//! ожидаемым количеством байт в ответе.
//! \par ПРИМЕЧАНИЕ 2.
//! Функция не изменяет длину байтового массива \a answer.
//
//! \param[in]  request запрос
//! \param[out] answer  ответ.
//! \param[out] errorcode код ошибки в пакете ответа с ошибкой
//! \return Реальное количество байт в ответе. Если равно 0 - нет ответа.
//===================================================================
int SerialPort::query( const QByteArray &request, QByteArray &answer,
                         int *errorcode)
{
  switch( mode )
  { case( ModbusRTU ): return d->query(     request, answer,errorcode );
    case( XBee      ): return d->queryXBee( request, answer,errorcode );
  }
  return 0;
}

//===================================================================
//! Очистка последнего типа ошибки
//===================================================================
void SerialPort::resetLastErrorType()
{
  d->last_error_id = 0;
}
